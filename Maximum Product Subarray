class Solution(object):
    def maxProduct(self, nums):
        if not nums:
            return 0
        
        max_product = nums[0]
        min_product = nums[0]
        result = nums[0]
        
        for i in range(1, len(nums)):
            num = nums[i]
            if num < 0:
                max_product, min_product = min_product, max_product
            
            max_product = max(num, max_product * num)
            min_product = min(num, min_product * num)
            
            result = max(result, max_product)
        
        return result

Dynamic Programming Approach:--------------------------
We will maintain two variables:
max_product: the maximum product of the subarray ending at the current index.
min_product: the minimum product of the subarray ending at the current index (important for handling negative numbers).
At each step, we update these products based on the current number in the array.

Example Calculation----------------------------
Let's calculate the maximum product subarray for the array nums = [2, 3, -2, 4].
Initialization:
Start with:
max_product = nums[0] = 2
min_product = nums[0] = 2
result = nums[0] = 2
Iterate through the array:
Index 1 (Value = 3):
Since 
3
3 is positive, we do not swap max_product and min_product.
Update max_product: \text{max_product} = \max(3, 2 \times 3) = \max(3, 6) = 6
Update min_product: \text{min_product} = \min(3, 2 \times 3) = \min(3, 6) = 3
Update result: 
result=max⁡(2,6)=6
result=max(2,6)=6
Index 2 (Value = -2):Since −2
−2 is negative, we swap max_product and min_product:
Now, max_product = 3 and min_product = 6.
Update max_product: \text{max_product} = \max(-2, 3 \times -2) = \max(-2, -6) = -2
Update min_product: \text{min_product} = \min(-2, 6 \times -2) = \min(-2, -12) = -12
Update result: 
result=max⁡(6,−2)=6
result=max(6,−2)=6
Index 3 (Value = 4):
Since 
4
4 is positive, we do not swap max_product and min_product.
Update max_product: \text{max_product} = \max(4, -2 \times 4) = \max(4, -8) = 4
Update min_product: \text{min_product} = \min(4, -12 \times 4) = \min(4, -48) = -48
Update result: 
result=max⁡(6,4)=6
result=max(6,4)=6
Final Result:
After iterating through the entire array, the maximum product subarray is 6
6.
