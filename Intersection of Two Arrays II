METHOD - 1
class Solution(object):
    def intersect(self, nums1, nums2):
        intersection = []
        for i in range(len(nums1)):
            if nums1[i] in  nums2:
                intersection.append(nums1[i])
                nums2.pop(nums2.index(nums1[i]))
        return intersection

Example Input-------------------
Consider the following arrays:
nums1 = [1, 2, 2, 1]
nums2 = [2, 2]
Step-by-Step Execution
Initialization:
intersection = []
Start iterating over nums1.
First Iteration (i = 0):
Check nums1[0] which is 1.
1 is not in nums2, so nothing happens.
Second Iteration (i = 1):
Check nums1[1] which is 2.
2 is in nums2, so:
Append 2 to intersection: intersection = [2]
Remove 2 from nums2: nums2 becomes [2] (the first 2 is removed).
Third Iteration (i = 2):
Check nums1[2] which is 2.
2 is in nums2, so:
Append 2 to intersection: intersection = [2, 2]
Remove 2 from nums2: nums2 becomes [] (the last 2 is removed).
Fourth Iteration (i = 3):
Check nums1[3] which is 1.
1 is not in nums2, so nothing happens.
Final Result
After completing the iterations, the intersection list contains:
intersection = [2, 2]

METHOD - 2-------------------------
class Solution(object):
    def intersect(self, nums1, nums2):
        nums1.sort()
        nums2.sort()
        ans = []
        i, j = 0, 0
        n, m = len(nums1), len(nums2)
        while i < n and j < m:
            if nums1[i] == nums2[j]:
                ans.append(nums1[i])
                i += 1
                j += 1
            elif nums1[i] < nums2[j]:
                i += 1
            else:
                j += 1
        return ans
        
