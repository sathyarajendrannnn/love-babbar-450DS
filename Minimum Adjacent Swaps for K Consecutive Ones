class Solution:
    def minMoves(self, nums, k):
        # Step 1: Collect indices of all 1's
        p = [i for i, v in enumerate(nums) if v == 1]
        n = len(p)
        
        # Step 2: Create a prefix sum array
        presum = [0] * (n + 1)
        for i in range(n):
            presum[i + 1] = presum[i] + p[i]

        res = float('inf')

        # Step 3: Sliding window for odd k
        if k % 2 == 1:
            radius = (k - 1) // 2
            for i in range(radius, n - radius):
                # Calculate the right and left distances
                right = presum[i + radius + 1] - presum[i + 1]
                left = presum[i] - presum[i - radius]
                res = min(res, right - left)
            return res - radius * (radius + 1)
        
        # Step 4: Sliding window for even k
        else:
            radius = (k - 2) // 2
            for i in range(radius, n - radius - 1):
                right = presum[i + radius + 2] - presum[i + 1]
                left = presum[i] - presum[i - radius]
                res = min(res, right - left - p[i])
            return res - radius * (radius + 1) - (radius + 1)




Example Walkthrough
Let's verify the example you provided:
Input: nums = [1, 0, 0, 1, 0, 1], k = 2
Indices of 1's: p = [0, 3, 5].
Prefix Sum Calculation:
presum = [0, 0, 3, 5].
Sliding Window Calculation:
For k = 2 (even):
Radius = (2 - 2) // 2 = 0.
The loop runs for i from 0 to 1 (since n - radius - 1 = 2 - 0 - 1).
For i = 0:
Right = presum[1] - presum[1] = 0.
Left = presum[0] - presum[0] = 0.
Result = min(inf, 0 - 0 - p[0]) = min(inf, -1).
For i = 1:
Right = presum[2] - presum[1] = 3.
Left = presum[1] - presum[0] = 0.
Result = min(-1, 3 - 0 - p[1]) = min(-1, 3 - 3) = min(-1, 0).
Final Result: The minimum moves required is 1, which matches the expected output.
