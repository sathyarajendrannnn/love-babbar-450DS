class Solution(object):
    def canThreePartsEqualSum(self, arr):
        total_sum = sum(arr)
        
        # Step 2: Check if the total sum is divisible by 3
        if total_sum % 3 != 0:
            return False
        
        # Step 3: Determine the target sum for each part
        target_sum = total_sum // 3
        current_sum = 0
        partitions = 0
        
        # Step 4: Iterate through the array and find the partitions
        for i in range(len(arr)):
            current_sum += arr[i]
            if current_sum == target_sum:
                partitions += 1
                current_sum = 0  # Reset current sum for the next partition
                
                # If we found 2 partitions, we need to ensure there are elements left for the third part
                if partitions == 2 and i < len(arr) - 1:
                    return True
        
        # If we exit the loop and haven't found enough partitions, return False
        return False


Example Walkthrough
Input:
arr = [1, -1, 1, -1]
Step 1: Calculate Total Sum
First, we calculate the total sum of the array:
total_sum
=
1
+
(
−
1
)
+
1
+
(
−
1
)
=
0
total_sum=1+(−1)+1+(−1)=0
Step 2: Check Divisibility by 3
Next, we check if the total sum is divisible by 3:
total_sum
m
o
d
 
 
3
=
0
m
o
d
 
 
3
=
0
total_summod3=0mod3=0
Since the total sum is divisible by 3, we proceed to the next step.
Step 3: Determine Target Sum
We calculate the target sum for each part:
target
=
total_sum
3
=
0
3
=
0
target= 
3
total_sum
​
 = 
3
0
​
 =0
Step 4: Find Partitions
Now, we will iterate through the array to find two partition points where the sum of the elements equals the target sum.
Initialization:
current_sum = 0
count = 0
Iteration:
Index 0:
current_sum = 0 + 1 = 1 (not equal to target)
Index 1:
current_sum = 1 + (-1) = 0 (equal to target)
Increment count to 1 and reset current_sum to 0.
Index 2:
current_sum = 0 + 1 = 1 (not equal to target)
Index 3:
current_sum = 1 + (-1) = 0 (equal to target)
Increment count to 2 and reset current_sum to 0.
Step 5: Check for Valid Partitions
At this point, we have found count = 2. However, we need to ensure that the third part is non-empty. Since we are at the last element of the array, we cannot form a third part.
Conclusion
Since we cannot partition the array into three non-empty parts with equal sums, the expected output is False.
Thus, the function should return False for the input arr = [1, -1, 1, -1], which aligns with the expected behavior.
