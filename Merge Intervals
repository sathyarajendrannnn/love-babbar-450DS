class Solution(object):
    def merge(self, intervals):
        intervals.sort(key=lambda x: x[0]) 
        merged = []  
        for interval in intervals:
            if not merged or merged[-1][1] < interval[0]:
                merged.append(interval) 
            else:
                merged[-1][1] = max(merged[-1][1], interval[1])
        
        return merged

Mathematical Example----------------------

Let's illustrate this with a mathematical example:
Given:
intervals = [[1,3],[2,6],[8,10],[15,18]]
Step-by-Step Execution:
Before Merging:
The input intervals are: [[1,3],[2,6],[8,10],[15,18]].
Sorting the Intervals:
After sorting based on the starting times, the intervals remain the same: [[1,3],[2,6],[8,10],[15,18]].
Merging Process:
Initialize merged = [].
Iterate through each interval:
First Interval: [1, 3]
merged is empty, so append [1, 3] → merged = [[1, 3]].
Second Interval: [2, 6]
Check for overlap: merged[-1] (3) >= interval[0] (2) → overlap exists.
Merge: Update merged[-1] to max(3, 6) → merged = [[1, 6]].
Third Interval: [8, 10]
Check for overlap: merged[-1][1] (6) < interval[0] (8) → no overlap.
Append [8, 10] → merged = [[1, 6], [8, 10]].
Fourth Interval: [15, 18]
Check for overlap: merged[-1][1] (10) < interval[0] (15) → no overlap.
Append [15, 18] → merged = [[1, 6], [8, 10], [15, 18]].
Final Result:
The merged intervals are [[1, 6], [8, 10], [15, 18]].
