class Solution(object):
    def subarraySum(self, nums, k):
        count = 0
        cumulative_sum = 0
        sum_counts = {0: 1}  
        
        for num in nums:
            cumulative_sum += num

            if (cumulative_sum - k) in sum_counts:
                count += sum_counts[cumulative_sum - k]

            if cumulative_sum in sum_counts:
                sum_counts[cumulative_sum] += 1
            else:
                sum_counts[cumulative_sum] = 1
        
        return count

Example------------------------------
Input:
nums = [1, 2, 3]
k = 3
Step-by-Step Execution
Initialization:
We start with a cumulative sum of 0.
We use a hashmap (dictionary) to keep track of the frequency of cumulative sums. We initialize it with {0: 1} to account for subarrays that sum to 
k
k from the start.
Iterate Through the Array:
We will iterate through each element in nums, updating the cumulative sum and the hashmap.
Iteration Details:
Iteration 1:
Current number: 1
Cumulative sum: 0 + 1 = 1
Check if 1 - 3 = -2 exists in the hashmap. It does not.
Update hashmap: {0: 1, 1: 1}
Iteration 2:
Current number: 2
Cumulative sum: 1 + 2 = 3
Check if 3 - 3 = 0 exists in the hashmap. It does (with a count of 1).
Increment count by 1 (total count now is 1).
Update hashmap: {0: 1, 1: 1, 3: 1}
Iteration 3:
Current number: 3
Cumulative sum: 3 + 3 = 6
Check if 6 - 3 = 3 exists in the hashmap. It does (with a count of 1).
Increment count by 1 (total count now is 2).
Update hashmap: {0: 1, 1: 1, 3: 1, 6: 1}
Final Count
After iterating through the entire array, we find that the total number of contiguous subarrays whose sum equals 
k
k is 2.
The valid subarrays that sum to 
k
=
3
k=3 are:
Subarray from index 1 to 1: [2]
Subarray from index 0 to 2: [1, 2]
        
