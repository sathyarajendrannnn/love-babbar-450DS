class Solution(object):
    def shortestPalindrome(self, s):
        if not s:
            return s
        
        # Step 1: Create the reversed string
        rev_s = s[::-1]
        
        # Step 2: Concatenate original and reversed string with a separator
        combined = s + "#" + rev_s
        
        # Step 3: Compute the LPS array
        lps = self.computeLPS(combined)
        
        # Step 4: Determine the number of characters to add
        longest_palindrome_length = lps[-1]
        to_add = rev_s[0:len(s) - longest_palindrome_length]
        
        # Step 5: Construct the shortest palindrome
        return to_add + s

    def computeLPS(self, pattern):
        lps = [0] * len(pattern)
        length = 0  # length of the previous longest prefix suffix
        i = 1
        
        while i < len(pattern):
            if pattern[i] == pattern[length]:
                length += 1
                lps[i] = length
                i += 1
            else:
                if length != 0:
                    length = lps[length - 1]
                else:
                    lps[i] = 0
                    i += 1
        
        return lps


Example----------------------------------------------------------------------------
Let's take the string s = "aacecaaa".
Step 1: Reverse the String
The reversed string rev_s is "aaacecaa".
Step 2: Concatenate with a Separator
We concatenate the original string and the reversed string with a separator (e.g., #):
combined = "aacecaaa#aaacecaa".
Step 3: Compute the LPS Array
We compute the Longest Prefix Suffix (LPS) array for the combined string. The LPS array helps us find the longest palindromic prefix.
For the string "aacecaaa#aaacecaa", the LPS array would look like this:
javascript


Index:   0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
String:  a a c e c a a a # a a a c e c a a
LPS:     0 1 0 0 1 2 3 4 0 0 1 2 3 4 5 6
The last value of the LPS array is 7, which indicates that the longest palindromic prefix has a length of 7.
Step 4: Determine Characters to Add
The length of the original string s is 8. The longest palindromic prefix length is 7.
We need to add characters from the reversed string that do not overlap with the longest palindromic prefix:
Characters to add: rev_s[0:8 - 7] = rev_s[0:1] = "a".
Step 5: Construct the Shortest Palindrome
Finally, we construct the shortest palindrome by adding the characters to the front of the original string:
Result: "a" + "aacecaaa" = "aaacecaaa".
Conclusion
The shortest palindrome that can be formed by adding characters in front of the string "aacecaaa" is "aaacecaaa".
Another Example
Let's consider another string s = "abcd".
Step 1: Reverse the String
rev_s = "dcba".
Step 2: Concatenate with a Separator
combined = "abcd#dcba".
Step 3: Compute the LPS Array
For the string "abcd#dcba", the LPS array would look like this:
javascript


Index:   0 1 2 3 4 5 6 7 8
String:  a b c d # d c b a
LPS:     0 0 0 0 0 0 0 0 0
The last value of the LPS array is 0, indicating that there is no palindromic prefix.
Step 4: Determine Characters to Add
The length of the original string s is 4. The longest palindromic prefix length is 0.
Characters to add: rev_s[0:4 - 0] = "dcba".
Step 5: Construct the Shortest Palindrome
Result: "dcba" + "abcd" = "dcbabcd".
Conclusion
For the string "abcd", the shortest palindrome that can be formed is "dcbabcd".
