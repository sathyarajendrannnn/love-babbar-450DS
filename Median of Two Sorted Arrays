class Solution(object):
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        # Ensure nums1 is the smaller array to optimize the binary search
        if len(nums1) > len(nums2):
            nums1, nums2 = nums2, nums1
        
        x, y = len(nums1), len(nums2)
        low, high = 0, x
        
        while low <= high:
            partitionX = (low + high) // 2
            partitionY = (x + y + 1) // 2 - partitionX
            
            maxX = float('-inf') if partitionX == 0 else nums1[partitionX - 1]
            minX = float('inf') if partitionX == x else nums1[partitionX]
            
            maxY = float('-inf') if partitionY == 0 else nums2[partitionY - 1]
            minY = float('inf') if partitionY == y else nums2[partitionY]
            
            if maxX <= minY and maxY <= minX:
                if (x + y) % 2 == 0:
                    return (max(maxX, maxY) + min(minX, minY)) / 2.0
                else:
                    return max(maxX, maxY)
            elif maxX > minY:
                high = partitionX - 1
            else:
                low = partitionX + 1

        raise ValueError("Input arrays are not sorted")

# Example usage
sol = Solution()
print(sol.findMedianSortedArrays([1, 3], [2]))  # Output: 2.0
print(sol.findMedianSortedArrays([1, 2], [3, 4]))  # Output: 2.5


Let's apply this algorithm to the second example:

Input:

nums1 = [1, 2]

nums2 = [3, 4]

1. Lengths: m = 2, n = 2.

2. Binary Search:

• Start with left = 0, right = 2 (length of nums1).

• Calculate partitionl and partition2:

X

In the first iteration, partition1 = 1, partition2 = 1.

3. Calculate Boundaries:

maxLeft1 = nums1[0] = 1, minRight1 = nums1[1] = 2

maxLeft2 = nums2[0] = 3, minRight2 = nums2[1] = 4

4. Check Conditions:

maxLeft1 (1) <= minRight2 (4) and maxLeft2 (3) <= minRight1 (2) does not hold.

• Adjust partitions: since maxLeft2 > minRight1, move left to partition1 + 1.

5. Next Iteration:

• Now, partition1 = 2, partition2 = 0.

• Calculate boundaries again:

maxLeft1 = nums1[1] = 2, minRight1 = inf

maxLeft2 = -inf, minRight2 = 3

6. Check Conditions Again:

Now, maxLeft1 (2) <= minRight2 (3) and maxLeft2 (-inf) <= minRight1 (inf) holds true.

7 Calculate Median:

• Since the total length is even, calculate: Median = max(2-0)+min(,3) 2+3 2 2.5.
